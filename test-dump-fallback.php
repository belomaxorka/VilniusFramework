<?php declare(strict_types=1);

/**
 * –¢–µ—Å—Ç Fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ Dump Server
 * 
 * –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ dump server –ù–ï –∑–∞–ø—É—â–µ–Ω.
 * –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ storage/logs/dumps.log
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£–ë–ï–î–ò–¢–ï–°–¨ —á—Ç–æ dump server –ù–ï –∑–∞–ø—É—â–µ–Ω!
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: php test-dump-fallback.php
 * 3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥: php vilnius dump:log
 */

require_once __DIR__ . '/core/bootstrap.php';

\Core\Core::init();

echo "üß™ –¢–µ—Å—Ç Fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ Dump Server\n";
echo str_repeat('‚îÄ', 60) . "\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –ù–ï –¥–æ—Å—Ç—É–ø–µ–Ω
if (dump_server_available()) {
    echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Dump Server –ó–ê–ü–£–©–ï–ù!\n";
    echo "   –î–ª—è —Ç–µ—Å—Ç–∞ fallback –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (Ctrl+C)\n";
    echo "   –ò–Ω–∞—á–µ –¥–∞–Ω–Ω—ã–µ —É–π–¥—É—Ç –≤ —Å–µ—Ä–≤–µ—Ä, –∞ –Ω–µ –≤ –ª–æ–≥ —Ñ–∞–π–ª.\n\n";
    
    $response = readline("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/n): ");
    if (strtolower($response) !== 'y') {
        exit(0);
    }
}

echo "‚úÖ Dump Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - fallback –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n";

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n\n";

$testData = [
    'id' => 999,
    'name' => 'Fallback Test',
    'timestamp' => date('Y-m-d H:i:s'),
    'data' => [
        'server' => 'unavailable',
        'logged' => true,
    ]
];

server_dump($testData, 'Fallback Test Data');

$user = [
    'id' => 123,
    'email' => 'test@example.com',
    'roles' => ['admin'],
];

server_dump($user, 'User Data (Logged)');

server_dump('Simple string value', 'String Test');
server_dump(42, 'Integer Test');
server_dump(true, 'Boolean Test');

echo "\n‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\n";

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏
$logFile = STORAGE_DIR . '/logs/dumps.log';

echo "üìã –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–≥-—Ñ–∞–π–ª:\n";
echo "   {$logFile}\n\n";

echo "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏:\n";
echo "   php vilnius dump:log              # –í–µ—Å—å –ª–æ–≥\n";
echo "   php vilnius dump:log --tail=5     # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π\n";
echo "   php vilnius dump:log --clear      # –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥\n\n";

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if (file_exists($logFile)) {
    $size = filesize($logFile);
    $sizeFormatted = $size > 1024 ? round($size / 1024, 2) . ' KB' : $size . ' B';
    
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞:\n";
    echo "   –†–∞–∑–º–µ—Ä: {$sizeFormatted}\n";
    echo "   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: " . date('Y-m-d H:i:s', filemtime($logFile)) . "\n\n";
    
    echo "üí° –°–æ–≤–µ—Ç: –ó–∞–ø—É—Å—Ç–∏—Ç–µ dump server –¥–ª—è real-time –æ—Ç–ª–∞–¥–∫–∏:\n";
    echo "   php vilnius dump-server\n";
} else {
    echo "‚ö†Ô∏è  –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏?\n";
}


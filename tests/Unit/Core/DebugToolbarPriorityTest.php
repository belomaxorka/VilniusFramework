<?php declare(strict_types=1);

use Core\DebugToolbar;
use Core\DebugToolbar\AbstractCollector;

test('collectors are sorted by priority (higher = earlier)', function () {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
    $collector1 = new class extends AbstractCollector {
        public function __construct() {
            $this->priority = 50; // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        }
        public function getName(): string { return 'test1'; }
        public function getTitle(): string { return 'Test 1'; }
        public function getIcon(): string { return '1Ô∏è‚É£'; }
        public function collect(): void {}
        public function render(): string { return 'Test 1 Content'; }
    };

    $collector2 = new class extends AbstractCollector {
        public function __construct() {
            $this->priority = 100; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
        }
        public function getName(): string { return 'test2'; }
        public function getTitle(): string { return 'Test 2'; }
        public function getIcon(): string { return '2Ô∏è‚É£'; }
        public function collect(): void {}
        public function render(): string { return 'Test 2 Content'; }
    };

    $collector3 = new class extends AbstractCollector {
        public function __construct() {
            $this->priority = 10; // –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø–æ—Å–ª–µ–¥–Ω–∏–π
        }
        public function getName(): string { return 'test3'; }
        public function getTitle(): string { return 'Test 3'; }
        public function getIcon(): string { return '3Ô∏è‚É£'; }
        public function collect(): void {}
        public function render(): string { return 'Test 3 Content'; }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    DebugToolbar::addCollector($collector1);
    DebugToolbar::addCollector($collector3);
    DebugToolbar::addCollector($collector2);

    // –†–µ–Ω–¥–µ—Ä–∏–º (–≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)
    $html = DebugToolbar::render();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ HTML (test2 (100) -> test1 (50) -> test3 (10))
    $pos1 = strpos($html, 'Test 1');
    $pos2 = strpos($html, 'Test 2');
    $pos3 = strpos($html, 'Test 3');

    expect($pos2)->toBeLessThan($pos1, 'Test 2 (priority 100) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ Test 1 (priority 50)');
    expect($pos1)->toBeLessThan($pos3, 'Test 1 (priority 50) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ Test 3 (priority 10)');

    // –û—á–∏—â–∞–µ–º
    DebugToolbar::removeCollector('test1');
    DebugToolbar::removeCollector('test2');
    DebugToolbar::removeCollector('test3');
});

test('header stats are sorted by priority (higher = earlier)', function () {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã —Å header stats
    $collector1 = new class extends AbstractCollector {
        public function __construct() {
            $this->priority = 50;
        }
        public function getName(): string { return 'stats1'; }
        public function getTitle(): string { return 'Stats 1'; }
        public function getIcon(): string { return 'üìä'; }
        public function collect(): void {
            $this->data = ['count' => 1];
        }
        public function render(): string { return ''; }
        public function getHeaderStats(): array {
            return [[
                'icon' => '1Ô∏è‚É£',
                'value' => 'First',
                'color' => '#000',
            ]];
        }
    };

    $collector2 = new class extends AbstractCollector {
        public function __construct() {
            $this->priority = 80;
        }
        public function getName(): string { return 'stats2'; }
        public function getTitle(): string { return 'Stats 2'; }
        public function getIcon(): string { return 'üìä'; }
        public function collect(): void {
            $this->data = ['count' => 2];
        }
        public function render(): string { return ''; }
        public function getHeaderStats(): array {
            return [[
                'icon' => '2Ô∏è‚É£',
                'value' => 'Second',
                'color' => '#000',
            ]];
        }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    DebugToolbar::addCollector($collector1);
    DebugToolbar::addCollector($collector2);

    // –†–µ–Ω–¥–µ—Ä–∏–º
    $html = DebugToolbar::render();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ header (Second (80) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ First (50))
    $posFirst = strpos($html, '>First<');
    $posSecond = strpos($html, '>Second<');

    expect($posSecond)->toBeLessThan($posFirst, 'Header stat —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 80 –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —á–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 50');

    // –û—á–∏—â–∞–µ–º
    DebugToolbar::removeCollector('stats1');
    DebugToolbar::removeCollector('stats2');
});

test('priority can be changed dynamically', function () {
    $collector = new class extends AbstractCollector {
        public function getName(): string { return 'dynamic'; }
        public function getTitle(): string { return 'Dynamic'; }
        public function getIcon(): string { return 'üîÑ'; }
        public function collect(): void {}
        public function render(): string { return 'Dynamic'; }
    };

    DebugToolbar::addCollector($collector);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    expect($collector->getPriority())->toBe(100); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ AbstractCollector

    // –ú–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    $collector->setPriority(25);
    expect($collector->getPriority())->toBe(25);

    // –û—á–∏—â–∞–µ–º
    DebugToolbar::removeCollector('dynamic');
});

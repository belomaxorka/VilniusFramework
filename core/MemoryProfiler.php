<?php declare(strict_types=1);

namespace Core;

class MemoryProfiler
{
    private static array $snapshots = [];
    private static ?int $startMemory = null;

    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     */
    public static function start(): void
    {
        if (!Environment::isDebug()) {
            return;
        }

        self::$startMemory = memory_get_usage(false);
        self::$snapshots = [];

        self::snapshot('start', 'Memory profiling started');
    }

    /**
     * –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –ø–∞–º—è—Ç–∏
     */
    public static function snapshot(string $name, ?string $label = null): array
    {
        if (!Environment::isDebug()) {
            return [];
        }

        $current = memory_get_usage(false);
        $peak = memory_get_peak_usage(false);

        $snapshot = [
            'name' => $name,
            'label' => $label,
            'memory' => $current,
            'peak' => $peak,
            'diff' => 0,
            'diff_from_start' => 0,
            'timestamp' => microtime(true),
        ];

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–Ω–∏–º–∫–æ–º
        if (!empty(self::$snapshots)) {
            $previous = end(self::$snapshots);
            $snapshot['diff'] = $current - $previous['memory'];
        }

        // –†–∞–∑–Ω–∏—Ü–∞ –æ—Ç –Ω–∞—á–∞–ª–∞
        if (self::$startMemory !== null) {
            $snapshot['diff_from_start'] = $current - self::$startMemory;
        }

        self::$snapshots[] = $snapshot;

        return $snapshot;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     * 
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã (–ø–∞—Ä–∞–º–µ—Ç—Ä false).
     * –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –ø–∞–º—è—Ç—å, –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è PHP –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤–∫–ª—é—á–∞—è
     * –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –±—É—Ñ–µ—Ä—ã, –∫–µ—à–∏ –∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.
     * 
     * –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã—à–µ, —á–µ–º –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ memory_get_usage(true),
     * —Ç–∞–∫ –∫–∞–∫ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PHP. –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     * —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
     * 
     * @return int –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
     * @see memory_get_usage()
     */
    public static function current(): int
    {
        return memory_get_usage(false);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
     * 
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ (–ø–∏–∫–æ–≤–æ–µ) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–∏—Å—Ç–µ–º—ã.
     * –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤—ã–¥–µ–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è PHP
     * –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
     * 
     * @return int –ü–∏–∫–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö (—Å–∏—Å—Ç–µ–º–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
     * @see memory_get_peak_usage()
     */
    public static function peak(): int
    {
        return memory_get_peak_usage(false);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–Ω–∏–º–∫–∏
     */
    public static function getSnapshots(): array
    {
        return self::$snapshots;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∏–º–∫–æ–≤
     */
    public static function count(): int
    {
        return count(self::$snapshots);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å–Ω–∏–º–∫–∏
     */
    public static function clear(): void
    {
        self::$snapshots = [];
        self::$startMemory = null;
    }

    /**
     * –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞–º—è—Ç–∏
     */
    public static function dump(): void
    {
        if (!Environment::isDebug() || empty(self::$snapshots)) {
            return;
        }

        $current = memory_get_usage(false);
        $peak = memory_get_peak_usage(false);
        $limit = self::getMemoryLimit();

        $output = '<div style="background: #e3f2fd; border: 1px solid #2196f3; margin: 10px; padding: 15px; border-radius: 5px; font-family: monospace;">';
        $output .= '<h4 style="color: #1565c0; margin-top: 0;">üíæ Memory Profile</h4>';

        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        $output .= '<div style="background: white; padding: 10px; border-radius: 3px; margin-bottom: 10px;">';
        $output .= '<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">';
        $output .= '<strong>Current Memory:</strong> <span style="color: #1976d2;">' . self::formatBytes($current) . '</span>';
        $output .= '</div>';
        $output .= '<div style="display: flex; justify-content: space-between; margin-bottom: 5px;">';
        $output .= '<strong>Peak Memory:</strong> <span style="color: #d32f2f;">' . self::formatBytes($peak) . '</span>';
        $output .= '</div>';
        $output .= '<div style="display: flex; justify-content: space-between;">';
        $output .= '<strong>Memory Limit:</strong> <span style="color: #757575;">' . self::formatBytes($limit) . '</span>';
        $output .= '</div>';

        // Progress bar
        if ($limit > 0) {
            $percentage = min(100, ($peak / $limit) * 100);
            $color = $percentage > 80 ? '#d32f2f' : ($percentage > 50 ? '#f57c00' : '#388e3c');

            $output .= '<div style="margin-top: 10px;">';
            $output .= '<div style="background: #e0e0e0; height: 20px; border-radius: 10px; overflow: hidden;">';
            $output .= '<div style="background: ' . $color . '; width: ' . $percentage . '%; height: 100%; display: flex; align-items: center; justify-content: center; color: white; font-size: 11px;">';
            $output .= number_format($percentage, 1) . '%';
            $output .= '</div></div>';
            $output .= '</div>';
        }

        $output .= '</div>';

        // –¢–∞–±–ª–∏—Ü–∞ —Å–Ω–∏–º–∫–æ–≤
        if (count(self::$snapshots) > 1) {
            $output .= '<div style="background: white; padding: 10px; border-radius: 3px;">';
            $output .= '<strong>Memory Snapshots:</strong><br>';
            $output .= '<table style="width: 100%; border-collapse: collapse; margin-top: 5px; font-size: 12px;">';
            $output .= '<tr style="border-bottom: 1px solid #e0e0e0;">';
            $output .= '<th style="text-align: left; padding: 5px;">#</th>';
            $output .= '<th style="text-align: left; padding: 5px;">Name</th>';
            $output .= '<th style="text-align: left; padding: 5px;">Label</th>';
            $output .= '<th style="text-align: right; padding: 5px;">Memory</th>';
            $output .= '<th style="text-align: right; padding: 5px;">Diff</th>';
            $output .= '<th style="text-align: right; padding: 5px;">Total Diff</th>';
            $output .= '</tr>';

            foreach (self::$snapshots as $index => $snapshot) {
                $diffColor = $snapshot['diff'] > 0 ? '#d32f2f' : ($snapshot['diff'] < 0 ? '#388e3c' : '#757575');
                $diffSign = $snapshot['diff'] > 0 ? '+' : '';

                $output .= '<tr style="' . ($index % 2 ? 'background: #f5f5f5;' : '') . '">';
                $output .= '<td style="padding: 5px;">#' . ($index + 1) . '</td>';
                $output .= '<td style="padding: 5px;">' . htmlspecialchars($snapshot['name']) . '</td>';
                $output .= '<td style="padding: 5px; color: #757575;">' . htmlspecialchars($snapshot['label'] ?? '-') . '</td>';
                $output .= '<td style="padding: 5px; text-align: right;">' . self::formatBytes($snapshot['memory']) . '</td>';
                $output .= '<td style="padding: 5px; text-align: right; color: ' . $diffColor . ';">' . $diffSign . self::formatBytes($snapshot['diff']) . '</td>';
                $output .= '<td style="padding: 5px; text-align: right; color: #1976d2;">' . ($snapshot['diff_from_start'] >= 0 ? '+' : '') . self::formatBytes($snapshot['diff_from_start']) . '</td>';
                $output .= '</tr>';
            }

            $output .= '</table>';
            $output .= '</div>';
        }

        $output .= '</div>';

        // –ö–æ–≥–¥–∞ debug –≤–∫–ª—é—á–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ toolbar, –∏–Ω–∞—á–µ –≤ –ª–æ–≥–∏
        if (Environment::isDebug()) {
            Debug::addOutput($output);
        } else {
            Logger::debug("Memory: Current=" . self::formatBytes($current) . ", Peak=" . self::formatBytes($peak));
        }
    }

    /**
     * Measure - –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    public static function measure(string $name, callable $callback): mixed
    {
        if (!Environment::isDebug()) {
            return $callback();
        }

        $before = memory_get_usage(false);
        self::snapshot($name . '_start', 'Before ' . $name);

        try {
            $result = $callback();
        } finally {
            $after = memory_get_usage(false);
            self::snapshot($name . '_end', 'After ' . $name);

            $diff = $after - $before;
            $diffFormatted = self::formatBytes(abs($diff));
            $sign = $diff >= 0 ? '+' : '-';

            // –ö–æ–≥–¥–∞ debug –≤–∫–ª—é—á–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ toolbar
            if (Environment::isDebug()) {
                $color = $diff > 1048576 ? '#d32f2f' : '#757575'; // –∫—Ä–∞—Å–Ω—ã–π –µ—Å–ª–∏ > 1MB
                Debug::addOutput(
                    '<div style="background: #f3e5f5; border: 1px solid #9c27b0; margin: 10px; padding: 10px; border-radius: 5px; font-family: monospace;">' .
                    '<strong>üíæ Memory:</strong> <span style="color: ' . $color . ';">' . htmlspecialchars($name) . ' ' . $sign . $diffFormatted . '</span>' .
                    '</div>'
                );
            }
        }

        return $result;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     * 
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \Core\Utils\FormatHelper::formatBytes()
     * @param int $bytes –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç–æ–≤
     * @param int $precision –¢–æ—á–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    public static function formatBytes(int $bytes, int $precision = 2): string
    {
        return \Core\Utils\FormatHelper::formatBytes($bytes, $precision);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –∏–∑ php.ini
     * 
     * –ü–∞—Ä—Å–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ memory_limit –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PHP –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –±–∞–π—Ç–∞—Ö.
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã K, M, G (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ).
     * 
     * @return int –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –≤ –±–∞–π—Ç–∞—Ö, 0 –µ—Å–ª–∏ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
     */
    public static function getMemoryLimit(): int
    {
        $limit = ini_get('memory_limit');

        // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å –∏–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
        if ($limit === '-1' || $limit === false) {
            return 0;
        }

        $limit = trim($limit);
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        if (empty($limit)) {
            return 0;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–æ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å K/M/G
        if (!preg_match('/^(\d+)([KMG])?$/i', $limit, $matches)) {
            // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            return 0;
        }

        $value = (int)$matches[1];
        $suffix = isset($matches[2]) ? strtolower($matches[2]) : '';

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        switch ($suffix) {
            case 'g':
                $value *= 1024;
                // fallthrough intentional
            case 'm':
                $value *= 1024;
                // fallthrough intentional
            case 'k':
                $value *= 1024;
                break;
        }

        return $value;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
     */
    public static function getUsagePercentage(): float
    {
        $limit = self::getMemoryLimit();

        if ($limit === 0) {
            return 0.0;
        }

        $current = memory_get_usage(false);
        return ($current / $limit) * 100;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ø–æ—Ä–æ–≥ –ø–∞–º—è—Ç–∏
     */
    public static function isThresholdExceeded(int $thresholdPercent = 80): bool
    {
        return self::getUsagePercentage() > $thresholdPercent;
    }
}

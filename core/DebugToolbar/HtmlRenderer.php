<?php declare(strict_types=1);

namespace Core\DebugToolbar;

/**
 * HTML —Ä–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è Debug Toolbar –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö HTML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
 */
class HtmlRenderer
{
    /**
     * –†–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     * 
     * @param string $message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @return string HTML
     */
    public static function renderEmptyState(string $message): string
    {
        return '<div style="padding: 20px; text-align: center; color: ' . ColorPalette::GREY . '; font-style: italic;">'
            . htmlspecialchars($message)
            . '</div>';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
     * 
     * @param string $title –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
     * @param array $data –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö [–∫–ª—é—á => –∑–Ω–∞—á–µ–Ω–∏–µ]
     * @return string HTML
     */
    public static function renderSection(string $title, array $data): string
    {
        $html = '<div style="margin-bottom: 20px;">';
        $html .= '<h4 style="color: ' . ColorPalette::PRIMARY . '; margin-bottom: 10px;">üìã ' . htmlspecialchars($title) . '</h4>';
        $html .= '<div style="background: #f5f5f5; padding: 15px; border-radius: 5px;">';

        foreach ($data as $key => $value) {
            $html .= '<div style="margin-bottom: 8px;">';
            $html .= '<strong>' . htmlspecialchars($key) . ':</strong> ';
            $html .= is_string($value) ? $value : htmlspecialchars(print_r($value, true));
            $html .= '</div>';
        }

        $html .= '</div>';
        $html .= '</div>';

        return $html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
     * 
     * @param string $title –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
     * @param array $data –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö [–∫–ª—é—á => –∑–Ω–∞—á–µ–Ω–∏–µ]
     * @param bool $collapsible –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–∞—è –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
     * @param string|null $warningMessage –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return string HTML
     */
    public static function renderDataTable(
        string $title,
        array $data,
        bool $collapsible = false,
        ?string $warningMessage = null
    ): string {
        $tableId = 'table_' . md5($title . random_bytes(8));

        $html = '<div style="margin-bottom: 20px;">';
        $html .= '<h4 style="color: ' . ColorPalette::PRIMARY . '; margin-bottom: 10px; cursor: ' . ($collapsible ? 'pointer' : 'default') . ';" ';

        if ($collapsible) {
            $html .= 'onclick="document.getElementById(\'' . $tableId . '\').style.display = document.getElementById(\'' . $tableId . '\').style.display === \'none\' ? \'table\' : \'none\'"';
        }

        $html .= '>üìã ' . htmlspecialchars($title) . ' <span style="color: ' . ColorPalette::GREY . '; font-size: 12px;">(' . count($data) . ')</span>';

        if ($collapsible) {
            $html .= ' <span style="font-size: 12px; color: ' . ColorPalette::GREY . ';">[click to toggle]</span>';
        }

        $html .= '</h4>';

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if ($warningMessage) {
            $html .= '<div style="background: #fff3cd; border: 1px solid #ffc107; padding: 10px; border-radius: 4px; margin-bottom: 10px; color: #856404;">';
            $html .= '‚ö†Ô∏è <strong>Warning:</strong> ' . htmlspecialchars($warningMessage);
            $html .= '</div>';
        }

        $html .= '<table id="' . $tableId . '" style="width: 100%; border-collapse: collapse; background: white; ' . ($collapsible ? 'display: none;' : '') . '">';
        $html .= '<thead>';
        $html .= '<tr style="background: #e3f2fd;">';
        $html .= '<th style="padding: 10px; text-align: left; border: 1px solid #ddd; font-weight: bold;">Key</th>';
        $html .= '<th style="padding: 10px; text-align: left; border: 1px solid #ddd; font-weight: bold;">Value</th>';
        $html .= '</tr>';
        $html .= '</thead>';
        $html .= '<tbody>';

        foreach ($data as $key => $value) {
            $html .= '<tr>';
            $html .= '<td style="padding: 8px; border: 1px solid #ddd; font-family: monospace; vertical-align: top; width: 30%;">'
                . htmlspecialchars((string)$key) . '</td>';
            $html .= '<td style="padding: 8px; border: 1px solid #ddd; font-family: monospace; word-break: break-all;">'
                . htmlspecialchars(self::formatValueForTable($value)) . '</td>';
            $html .= '</tr>';
        }

        $html .= '</tbody>';
        $html .= '</table>';
        $html .= '</div>';

        return $html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä badge (–∑–Ω–∞—á–∫–∞)
     * 
     * @param string $text –¢–µ–∫—Å—Ç badge
     * @param string $color –¶–≤–µ—Ç —Ñ–æ–Ω–∞
     * @return string HTML
     */
    public static function renderBadge(string $text, string $color): string
    {
        return '<span style="background: ' . $color . '; color: white; padding: 4px 8px; border-radius: 3px; font-weight: bold; font-size: 11px;">'
            . htmlspecialchars($text) . '</span>';
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     * 
     * @param string $title –ó–∞–≥–æ–ª–æ–≤–æ–∫
     * @param string $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @param string $color –¶–≤–µ—Ç –∞–∫—Ü–µ–Ω—Ç–∞
     * @return string HTML
     */
    public static function renderStatCard(string $title, string $value, string $color): string
    {
        $html = '<div style="background: white; padding: 15px; border-radius: 5px; border-left: 4px solid ' . $color . ';">';
        $html .= '<div style="font-size: 12px; color: #666; margin-bottom: 5px;">' . htmlspecialchars($title) . '</div>';
        $html .= '<div style="font-size: 18px; font-weight: bold; color: ' . $color . ';">' . htmlspecialchars($value) . '</div>';
        $html .= '</div>';
        return $html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞
     * 
     * @param float $percent –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
     * @param string|null $color –¶–≤–µ—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –µ—Å–ª–∏ null)
     * @param int $height –í—ã—Å–æ—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
     * @return string HTML
     */
    public static function renderProgressBar(float $percent, ?string $color = null, int $height = 20): string
    {
        if ($color === null) {
            $color = ColorPalette::getThresholdColor($percent, 50, 75);
        }
        
        $html = '<div style="margin-top: 10px; background: ' . ColorPalette::GREY_LIGHT . '; border-radius: 10px; overflow: hidden; height: ' . $height . 'px;">';
        $html .= '<div style="background: ' . $color . '; width: ' . min(100, $percent) . '%; height: 100%;"></div>';
        $html .= '</div>';
        
        return $html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     * 
     * @param array $stats –ú–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ['label' => 'value', ...]
     * @param int $columns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
     * @return string HTML
     */
    public static function renderStatsGrid(array $stats, int $columns = 4): string
    {
        $html = '<div style="background: #f5f5f5; padding: 10px; margin-bottom: 10px; border-radius: 4px;">';
        $html .= '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px; font-size: 12px;">';
        
        foreach ($stats as $label => $value) {
            $html .= '<div><strong>' . htmlspecialchars($label) . ':</strong> ' . (is_string($value) ? $value : htmlspecialchars((string)$value)) . '</div>';
        }
        
        $html .= '</div>';
        $html .= '</div>';
        
        return $html;
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ (highlight box)
     * 
     * @param string $content –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
     * @param string $color –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã
     * @param string|null $title –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @return string HTML
     */
    public static function renderHighlightBox(string $content, string $color, ?string $title = null): string
    {
        $html = '<div style="background: ' . $color . '20; border-left: 4px solid ' . $color . '; padding: 15px; margin-bottom: 20px; border-radius: 4px;">';
        
        if ($title) {
            $html .= '<h3 style="margin: 0 0 10px 0; color: ' . $color . ';">' . htmlspecialchars($title) . '</h3>';
        }
        
        $html .= '<div>' . $content . '</div>';
        $html .= '</div>';
        
        return $html;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
     * 
     * @param mixed $value –ó–Ω–∞—á–µ–Ω–∏–µ
     * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    private static function formatValueForTable(mixed $value): string
    {
        if (is_array($value)) {
            return json_encode($value, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
        }
        
        if (is_bool($value)) {
            return $value ? 'true' : 'false';
        }
        
        if (is_null($value)) {
            return 'null';
        }
        
        if (is_object($value)) {
            return get_class($value);
        }
        
        return (string)$value;
    }
}


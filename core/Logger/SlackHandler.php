<?php declare(strict_types=1);

namespace Core\Logger;

/**
 * Slack Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Slack —á–µ—Ä–µ–∑ Incoming Webhooks
 *
 * –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å Incoming Webhook –≤ Slack:
 * https://api.slack.com/messaging/webhooks
 */
class SlackHandler implements LogHandlerInterface
{
    protected string $webhookUrl;
    protected string $channel;
    protected string $username;
    protected string $emoji;
    protected string $minLevel;
    protected array $levels = ['debug', 'info', 'warning', 'error', 'critical'];

    /**
     * @param string $webhookUrl Webhook URL –æ—Ç Slack
     * @param string $channel –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #logs)
     * @param string $username –ò–º—è –±–æ—Ç–∞
     * @param string $emoji –≠–º–æ–¥–∑–∏ –±–æ—Ç–∞
     * @param string $minLevel –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function __construct(
        string $webhookUrl,
        string $channel = '#logs',
        string $username = 'Logger Bot',
        string $emoji = ':robot_face:',
        string $minLevel = 'error'
    )
    {
        $this->webhookUrl = $webhookUrl;
        $this->channel = $channel;
        $this->username = $username;
        $this->emoji = $emoji;
        $this->minLevel = strtolower($minLevel);
    }

    public function handle(string $level, string $message): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (!$this->shouldLog($level)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ webhook URL
        if (empty($this->webhookUrl)) {
            return;
        }

        $payload = $this->buildPayload($level, $message);
        $this->sendToSlack($payload);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    protected function shouldLog(string $level): bool
    {
        $currentLevelIndex = array_search($level, $this->levels);
        $minLevelIndex = array_search($this->minLevel, $this->levels);

        if ($currentLevelIndex === false || $minLevelIndex === false) {
            return false;
        }

        return $currentLevelIndex >= $minLevelIndex;
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack
     */
    protected function buildPayload(string $level, string $message): array
    {
        $color = $this->getColorForLevel($level);
        $emoji = $this->getEmojiForLevel($level);

        return [
            'channel' => $this->channel,
            'username' => $this->username,
            'icon_emoji' => $this->emoji,
            'attachments' => [
                [
                    'color' => $color,
                    'title' => $emoji . ' ' . strtoupper($level),
                    'text' => $message,
                    'footer' => \Core\Http::getHost(),
                    'ts' => time(),
                ]
            ]
        ];
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    protected function getColorForLevel(string $level): string
    {
        return match ($level) {
            'debug' => '#6c757d',      // —Å–µ—Ä—ã–π
            'info' => '#17a2b8',       // –≥–æ–ª—É–±–æ–π
            'warning' => '#ffc107',    // –∂–µ–ª—Ç—ã–π
            'error' => '#dc3545',      // –∫—Ä–∞—Å–Ω—ã–π
            'critical' => '#721c24',   // —Ç–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
            default => '#6c757d',
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    protected function getEmojiForLevel(string $level): string
    {
        return match ($level) {
            'debug' => 'üêõ',
            'info' => '‚ÑπÔ∏è',
            'warning' => '‚ö†Ô∏è',
            'error' => '‚ùå',
            'critical' => 'üî•',
            default => 'üìù',
        };
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç payload –≤ Slack
     */
    protected function sendToSlack(array $payload): void
    {
        $ch = curl_init($this->webhookUrl);

        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_POST => true,
            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],
            CURLOPT_POSTFIELDS => json_encode($payload),
            CURLOPT_TIMEOUT => 5,
            CURLOPT_CONNECTTIMEOUT => 3,
        ]);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        curl_close($ch);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é
        if ($httpCode !== 200 && $response !== 'ok') {
            error_log("SlackHandler: Failed to send log. HTTP Code: $httpCode");
        }
    }
}

<?php declare(strict_types=1);

namespace Core\Logger;

/**
 * Telegram Handler –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram —á–µ—Ä–µ–∑ Bot API
 *
 * –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
 * 1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –∏ –ø–æ–ª—É—á–∏—Ç—å Bot Token
 * 2. –ü–æ–ª—É—á–∏—Ç—å Chat ID (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot –∏–ª–∏ @getmyid_bot)
 */
class TelegramHandler implements LogHandlerInterface
{
    protected string $botToken;
    protected string $chatId;
    protected string $parseMode;
    protected string $minLevel;
    protected array $levels = ['debug', 'info', 'warning', 'error', 'critical'];

    /**
     * @param string $botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
     * @param string $chatId ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     * @param string $parseMode –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
     * @param string $minLevel –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function __construct(
        string $botToken,
        string $chatId,
        string $parseMode = 'HTML',
        string $minLevel = 'error'
    )
    {
        $this->botToken = $botToken;
        $this->chatId = $chatId;
        $this->parseMode = $parseMode;
        $this->minLevel = strtolower($minLevel);
    }

    public function handle(string $level, string $message): void
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (!$this->shouldLog($level)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
        if (empty($this->botToken) || empty($this->chatId)) {
            return;
        }

        $formattedMessage = $this->formatMessage($level, $message);
        $this->sendToTelegram($formattedMessage);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
     */
    protected function shouldLog(string $level): bool
    {
        $currentLevelIndex = array_search($level, $this->levels);
        $minLevelIndex = array_search($this->minLevel, $this->levels);

        if ($currentLevelIndex === false || $minLevelIndex === false) {
            return false;
        }

        return $currentLevelIndex >= $minLevelIndex;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
     */
    protected function formatMessage(string $level, string $message): string
    {
        $emoji = $this->getEmojiForLevel($level);
        $levelText = strtoupper($level);
        $timestamp = date('Y-m-d H:i:s');
        $host = \Core\Http::getHost();

        if ($this->parseMode === 'HTML') {
            return sprintf(
                "%s <b>%s</b>\n\n%s\n\n<i>%s | %s</i>",
                $emoji,
                $levelText,
                htmlspecialchars($message, ENT_QUOTES, 'UTF-8'),
                $host,
                $timestamp
            );
        } else {
            // Markdown format
            return sprintf(
                "%s *%s*\n\n%s\n\n_%s | %s_",
                $emoji,
                $levelText,
                $this->escapeMarkdown($message),
                $host,
                $timestamp
            );
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
     */
    protected function escapeMarkdown(string $text): string
    {
        $specialChars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
        foreach ($specialChars as $char) {
            $text = str_replace($char, '\\' . $char, $text);
        }
        return $text;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    protected function getEmojiForLevel(string $level): string
    {
        return match ($level) {
            'debug' => 'üêõ',
            'info' => '‚ÑπÔ∏è',
            'warning' => '‚ö†Ô∏è',
            'error' => '‚ùå',
            'critical' => 'üî•',
            default => 'üìù',
        };
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     */
    protected function sendToTelegram(string $message): void
    {
        $url = sprintf('https://api.telegram.org/bot%s/sendMessage', $this->botToken);

        $payload = [
            'chat_id' => $this->chatId,
            'text' => $message,
            'parse_mode' => $this->parseMode,
            'disable_web_page_preview' => true,
        ];

        $ch = curl_init($url);

        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_POST => true,
            CURLOPT_HTTPHEADER => ['Content-Type: application/json'],
            CURLOPT_POSTFIELDS => json_encode($payload),
            CURLOPT_TIMEOUT => 5,
            CURLOPT_CONNECTTIMEOUT => 3,
        ]);

        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        curl_close($ch);

        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏—é
        if ($httpCode !== 200) {
            error_log("TelegramHandler: Failed to send log. HTTP Code: $httpCode");
            if ($response) {
                error_log("TelegramHandler Response: " . $response);
            }
        }
    }
}

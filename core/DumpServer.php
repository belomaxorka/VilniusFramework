<?php declare(strict_types=1);

namespace Core;

class DumpServer
{
    private static ?string $host = '127.0.0.1';
    private static int $port = 9912;
    private static $socket = null;
    private static bool $running = false;

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç
     */
    public static function configure(string $host = '127.0.0.1', int $port = 9912): void
    {
        self::$host = $host;
        self::$port = $port;
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
     */
    public static function start(?callable $outputHandler = null): void
    {
        if (self::$running) {
            return;
        }

        $address = self::$host . ':' . self::$port;

        echo "üöÄ Dump Server started on {$address}\n";
        echo "Waiting for dumps...\n\n";

        self::$socket = @stream_socket_server(
            "tcp://{$address}",
            $errno,
            $errstr,
            STREAM_SERVER_BIND | STREAM_SERVER_LISTEN
        );

        if (!self::$socket) {
            throw new \RuntimeException("Failed to start server: {$errstr} ({$errno})");
        }

        self::$running = true;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (function_exists('pcntl_signal')) {
            pcntl_signal(SIGINT, function () {
                self::stop();
                exit(0);
            });
        }

        while (self::$running) {
            if (function_exists('pcntl_signal_dispatch')) {
                pcntl_signal_dispatch();
            }

            $client = @stream_socket_accept(self::$socket, 1);

            if ($client) {
                $data = stream_get_contents($client);
                fclose($client);

                if ($data) {
                    $decoded = json_decode($data, true);

                    if ($decoded) {
                        if ($outputHandler) {
                            $outputHandler($decoded);
                        } else {
                            self::defaultOutput($decoded);
                        }
                    }
                }
            }
        }

        self::stop();
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
     */
    public static function stop(): void
    {
        if (self::$socket) {
            fclose(self::$socket);
            self::$socket = null;
        }

        self::$running = false;

        echo "\nüëã Dump Server stopped\n";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
     */
    public static function isAvailable(): bool
    {
        $connection = @stream_socket_client(
            "tcp://" . self::$host . ":" . self::$port,
            $errno,
            $errstr,
            1
        );

        if ($connection) {
            fclose($connection);
            return true;
        }

        return false;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    public static function getConfig(): array
    {
        return [
            'host' => self::$host,
            'port' => self::$port,
        ];
    }

    /**
     * –í—ã–≤–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    private static function defaultOutput(array $data): void
    {
        $timestamp = date('H:i:s');
        $type = $data['type'] ?? 'dump';
        $label = $data['label'] ?? null;
        $content = $data['content'] ?? '';
        $dataType = $data['data_type'] ?? 'unknown';
        $file = $data['file'] ?? 'unknown';
        $line = $data['line'] ?? 0;

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        echo str_repeat('‚îÄ', 80) . "\n";
        echo "‚è∞ {$timestamp} ";

        if ($label) {
            echo "üìù {$label} ";
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (—É–±–∏—Ä–∞–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
        $relativePath = str_replace([ROOT . '/', ROOT . '\\'], '', $file);
        $relativePath = str_replace('\\', '/', $relativePath); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–µ—à–∏
        echo "üìç {$relativePath}:{$line}\n";
        echo str_repeat('‚îÄ', 80) . "\n";

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
        echo "üîç Type: {$dataType}\n";
        echo str_repeat('‚îÄ', 80) . "\n";
        
        if (is_string($content)) {
            echo $content . "\n";
        } else {
            echo print_r($content, true) . "\n";
        }

        echo "\n";
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π flush –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
        flush();
    }
}
